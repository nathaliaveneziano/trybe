// Operador $set

/*
O $set altera o valor de um campo específico.

Se o campo não existir, o operador $set adiciona um novo campo com o valor especificado. Se você especificar campos com dot notation , os documentos embedados necessários serão criados para suprir o caminho do campo.

Você pode especificar múltiplos pares de campos-valores que o operador $set alterará ou criará cada um desses campos.
*/
use('conteudo_trybe');
db.products.insertOne({
  _id: 100,
  sku: "abc123",
  quantity: 250,
  instock: true,
  reorder: false,
  details: { model: "14Q2", make: "xyz" },
  tags: [ "apparel", "clothing" ],
  ratings: [ { by: "ijk", rating: 4 } ]
})

use('conteudo_trybe');
db.products.find();


// Exemplo 1: Alterando campos no primeiro nível (top-level)
use('conteudo_trybe');
db.products.update(
  { _id: 100 },
  { $set: {
      quantity: 500,
      details: { model: "14Q3", make: "xyz" },
      tags: [ "coats", "outerwear", "clothing" ]
    }
  }
);


// Exemplo 2: Alterando campos em documentos embedados
/*
Para alterar campos dentro de subdocumentos, você deve utilizar o mesmo conceito de dot notation visto durante as operações de find().
*/
use('conteudo_trybe');
db.products.update(
  { _id: 100 },
  { $set: { "details.make": "zzz" } }
);


// Exemplo 3: Alterando valores em arrays
/*
Como visto, arrays são uma estrutura muito importante na modelagem de dados do MongoDB , e em algum momento você precisará fazer updates nessas estruturas.
*/
use('conteudo_trybe');
db.products.update(
  { _id: 100 },
  { $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2
    }
  }
);



