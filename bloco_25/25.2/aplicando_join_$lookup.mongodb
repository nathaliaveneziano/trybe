// Aplicando condições ao Join com $lookup


/*
Podemos incrementar ainda mais o $lookup adicionando a ele expressões mais elaboradas e aplicando vários operadores que você já conhece. Também pode referenciar campos dos documentos de entrada para serem utilizados nas condições e até mesmo montar um pipeline dentro dele.

Para isso, existem mais dois parâmetros, ambos opcionais:
  - let:
  define as variáveis que serão utilizadas no estágio pipeline dentro do $lookup . É necessário porque o estágio pipeline não consegue acessar diretamente os campos dos documentos de entrada, então esses campos precisam ser definidos previamente e transformados em variáveis;
  - pipeline:
  define as condições ou o pipeline que será executado na coleção de junção. Se você quiser todos os documentos da coleção de junção, é só especificá-lo como vazio ( [] ).
*/

use("example_db");
db.orders.insertMany([
  { _id: 1, item: "almonds", price: 12, ordered: 2 },
  { _id: 2, item: "pecans", price: 20, ordered: 1 },
  { _id: 3, item: "cookies", price: 10, ordered: 60 }
]);

use("example_db");
db.warehouses.insertMany([
  { _id: 1, stock_item: "almonds", warehouse: "A", instock: 120 },
  { _id: 2, stock_item: "pecans", warehouse: "A", instock: 80 },
  { _id: 3, stock_item: "almonds", warehouse: "B", instock: 60 },
  { _id: 4, stock_item: "cookies", warehouse: "B", instock: 40 },
  { _id: 5, stock_item: "cookies", warehouse: "A", instock: 80 }
]);

use("example_db");
db.orders.aggregate([
  {
    $lookup: {
      from: "warehouses",
      let: { order_item: "$item", order_qty: "$ordered" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: [ "$stock_item",  "$$order_item" ] },
                { $gte: [ "$instock", "$$order_qty" ] }
              ]
            }
          }
        },
        { $project: { stock_item: 0, _id: 0 } }
      ],
      as: "stockdata"
    }
  }
]);

/*
Em SQL seria:

SELECT * stockdata
FROM orders
WHERE stockdata IN (
  SELECT warehouse, instock
  FROM warehouses
  WHERE stock_item = orders.item
  AND instock >= orders.ordered
);
*/


// Exercícios de fixação


use("agg_samples");
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

/*
Exercício 1 - Selecione todos os clientes com as suas respectivas transações feitas;
*/
use("agg_samples");
db.clients.aggregate([
  { $lookup: {
    from: "transactions",
    let: { nameClient: "$name" },
    pipeline: [
      { $match: 
        { $expr:
          { $eq: ["$from", "$$nameClient"] }
        }
      }
    ],
    as: "clients_transactions"
  } }
]);


/*
Exercício 2 - Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
*/
use("agg_samples");
db.clients.aggregate([
  { $lookup: 
    {
      from: "transactions",
      let: { nameClient: "$name" },
      pipeline: [
        { $match: 
          { $expr:
            { $eq: ["$from", "$$nameClient"] }
          }
        }
      ],
      as: "clients_transactions"
    }
  },
  { $sort: { State: 1 } },
  { $limit: 4 }
]);


/*
Exercício 3 - Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
*/
use("agg_samples");
db.clients.aggregate([
  { $match: { State: "Florida"} },
  { $lookup: 
    {
      from: "transactions",
      let: { nameClient: "$name" },
      pipeline: [
        { $match: 
          { $expr:
            { $eq: ["$to", "$$nameClient"] }
          }
        }
      ],
      as: "clients_transactions"
    }
  }
]);

use("storage");
db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);