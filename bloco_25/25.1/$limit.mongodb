// Operador $limit

/*
O operador $limit limita o número de documentos que será passado para o próximo estágio do pipeline. Ele sempre recebe um valor do tipo inteiro e positivo.
*/

use("agg_samples");
db.articles.aggregate(
  [
    { $limit : 5 }
  ]
);


// Exercícios de fixação

use("agg_samples");
db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'floridaBank' },
]);


/*
Exercício 1 - Selecione todas as transações feitas pelo cliente chamado "Dave America";
*/
use("agg_samples");
db.transactions.aggregate([
  { $match: { from: "Dave America" } }
]);

/*
Exercício 2 - Selecione todas as transações com o valor entre 700 e 6000, ou que sejam recebidas pela cliente "Lisa Simpson";
*/
use("agg_samples");
db.transactions.aggregate([
  { $match: {
    $or: [
      { value: { $gte: 700, $lte: 6000 } },
      { to: "Lisa Simpson" }
    ]
  } }
]);

/*
Exercício 3 - Selecione três transações com o valor acima de 1000.
*/
use("agg_samples");
db.transactions.aggregate([
  { $match: { value: { $gt: 1000 } } },
  { $limit: 3 }
]);
